@page "/esp32"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h1>ESP32</h1>
<p>传感器温度：@_temperature</p>
<button @onclick="Publish">LED开关</button>
<table>
</table>

@code
{
	double _temperature = 0;
	public double Temprature
	{
		get
		{
			return _temperature;
		}
		set
		{
			_temperature = value;
			Console.WriteLine("被设置了" + value);
			StateHasChanged();
		}
	}

	async void Publish()
	{
		if (_mqtt is not null)
		{
			await _mqtt.InvokeVoidAsync("publish", "esp32/command/msp", new byte[] { 1 });
		}
	}

	IJSObjectReference? module;
	IJSObjectReference? _mqtt;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_esp32List.Add(this);
			await Task.Delay(1000);
			module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ESP32.razor.js");
			_mqtt = await module.InvokeAsync<IJSObjectReference>("getMqtt");
		}
	}

	static List<ESP32> _esp32List = new List<ESP32>();

	[JSInvokable]
	public static void GetJsData(byte[] arr)
	{
		double temp = BitConverter.ToDouble(arr, 0);
		foreach (ESP32 esp in _esp32List)
		{
			esp.Temprature = temp;
		}
	}


}