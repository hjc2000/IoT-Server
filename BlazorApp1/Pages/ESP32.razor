@page "/esp32"
@inject IJSRuntime JS

<h1>ESP32</h1>
<p>传感器温度：@_temperature</p>
<button @onclick="Publish">LED开关</button>
<div>
	<table>
		<tr>
			<th>姓名</th><th>年龄</th>
		</tr>
		@foreach(var per in _perList)
		{
			<tr @onclick="@(async void ()=>
			{
				OutputClick(per);
			})">
				<td>@per.Name</td><td>@per.Age</td>
			</tr>
		}
	</table>
</div>
@code
{
	double _temperature = 0;
	public double Temprature
	{
		get
		{
			return _temperature;
		}
		set
		{
			_temperature = value;
			StateHasChanged();
		}
	}

	async void Publish()
	{
		if (_mqtt is not null)
		{
			await _mqtt.InvokeVoidAsync("publish", "esp32/command/msp", new byte[] { 1 });
		}
	}

	IJSObjectReference? module;
	IJSObjectReference? _mqtt;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			//module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ESP32.razor.js");
			module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ESP32.razor.js");
			var dotnetHelper = DotNetObjectReference.Create(this);
			_mqtt = await module.InvokeAsync<IJSObjectReference>("getMqtt",dotnetHelper);
		}
	}


	[JSInvokable]
	public void GetJsData(byte[] arr)
	{
		double temp = BitConverter.ToDouble(arr, 0);
		Temprature = temp;
	}

	class Person
	{
		public string Name { get; set; } = "佚名";
		public int Age { get; set; } = 0;
	}

	List<Person> _perList = new List<Person>()
	{
		new Person()
		{
			Name="张三",
			Age=15,
		},
		new Person(),
		new Person(),
	};

	void OutputClick(Person person)
	{
		person.Age++;
		_perList.Add(new Person());
	}
}